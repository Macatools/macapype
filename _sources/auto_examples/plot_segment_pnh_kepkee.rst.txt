.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_plot_segment_pnh_kepkee.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_segment_pnh_kepkee.py:


.. _plot_segment_pnh_kepkee:

============================================================
Plot the results of a segmentation with ANTS-based pipeline
============================================================



.. code-block:: python


    # Authors: David Meunier <david_meunier_79@hotmail.fr>

    # License: BSD (3-clause)
    # sphinx_gallery_thumbnail_number = 2
    import os
    import os.path as op

    import json
    import pprint

    from macapype.utils.utils_tests import load_test_data







Testing plot in local
#############################################################################



.. code-block:: python


    data_path = load_test_data("data_test_macapype")

    wf_path = os.path.join(data_path, "test_NodeParams_KK")

    graph = os.path.join(wf_path, "graph.png")

    import matplotlib.pyplot as plt  # noqa
    img = plt.imread(graph)
    plt.figure(figsize=(36, 72))
    plt.imshow(img)
    plt.axis('off')
    plt.show()




.. image:: /auto_examples/images/sphx_glr_plot_segment_pnh_kepkee_001.png
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    data_dirpath /home/INT/meunier.d/data_macapype already exists
    /home/INT/meunier.d/data_macapype/data_test_macapype Already exists, skipping download


Data preparation
#############################################################################


results of cropping
===========================



.. code-block:: python


    cropped_T1_file = op.join(wf_path, "data_preparation_pipe", "bet_crop", "sub-Apache_ses-01_T1w_cropped.nii.gz")

    # displaying results
    cropped_T1 = os.path.join(wf_path, "outfile_T1.png")
    cmd = "fsleyes render --outfile {} --size 1800 600 {}".format(cropped_T1, cropped_T1_file)
    os.system(cmd)

    import matplotlib.pyplot as plt  # noqa
    img = plt.imread(cropped_T1)
    plt.figure(figsize=(36, 12))
    plt.imshow(img)
    plt.axis('off')
    plt.show()




.. image:: /auto_examples/images/sphx_glr_plot_segment_pnh_kepkee_002.png
    :class: sphx-glr-single-img




results of deoblique
===========================



.. code-block:: python


    ## after deoblique
    deoblique_T1_file = os.path.join(
        wf_path, "data_preparation_pipe", "deoblique_T1",
        "sub-Apache_ses-01_T1w.nii")

    outfile_deoblique = os.path.join(wf_path,"outfile_deoblique.png")
    cmd = "fsleyes render --outfile {} --size 1800 600 {} -a 50 {} -a 50".format(outfile_deoblique, cropped_T1_file, deoblique_T1_file)
    os.system(cmd)

    import matplotlib.pyplot as plt  # noqa
    img = plt.imread(outfile_deoblique)
    plt.figure(figsize=(8, 8))
    plt.imshow(img)
    plt.axis('off')
    plt.show()




.. image:: /auto_examples/images/sphx_glr_plot_segment_pnh_kepkee_003.png
    :class: sphx-glr-single-img




First part of the pipeline: brain extraction
#############################################################################


Correct bias results
==========================



.. code-block:: python


    debiased_T1_file = op.join(wf_path, "brain_extraction_pipe", "correct_bias_pipe", "restore_T1",
                               "sub-Apache_ses-01_T1w_cropped_noise_corrected_maths.nii.gz")

    debiased_T1 = os.path.join(wf_path,"debiased_T1.png")

    cmd = "fsleyes render --outfile {} --size 1800 600 {}".format(debiased_T1, debiased_T1_file)
    os.system(cmd)

    import matplotlib.pyplot as plt  # noqa
    fig, axs = plt.subplots(2, 1, figsize=(36, 24))
    axs[0].imshow(plt.imread(cropped_T1))
    axs[0].axis('off')

    axs[1].imshow(plt.imread(debiased_T1))
    axs[1].axis('off')
    plt.show()




.. image:: /auto_examples/images/sphx_glr_plot_segment_pnh_kepkee_004.png
    :class: sphx-glr-single-img




Brain extraction results
==========================



.. code-block:: python


    # At the end 1st part pipeline
    mask_file = os.path.join(
        wf_path, "brain_extraction_pipe", "extract_pipe", "smooth_mask",
        "sub-Apache_ses-01_T1w_cropped_noise_corrected_maths_brain_bin_bin.nii.gz")

    output_img_overlay = os.path.join(wf_path,"outfile_overlay.png")
    #cmd = "fsleyes render --outfile {} --size 800 600 {} -ot mask -o -a 50 {}".format(output_img_overlay, mask_file, T1_file)
    cmd = "fsleyes render --outfile {} --size 800 600 {} {} -a 50".format(output_img_overlay, cropped_T1_file, mask_file)
    os.system(cmd)

    import matplotlib.pyplot as plt  # noqa
    img = plt.imread(output_img_overlay)
    plt.figure(figsize=(36, 12))
    plt.imshow(img)
    plt.axis('off')
    plt.show()




.. image:: /auto_examples/images/sphx_glr_plot_segment_pnh_kepkee_005.png
    :class: sphx-glr-single-img




Second part of the pipeline: segmentation
#############################################################################



.. code-block:: python


    seg_pipe = op.join(wf_path, "brain_segment_from_mask_pipe")







debias T1xT2 and debias N4
=============================



.. code-block:: python


    denoised_T1_file = os.path.join(wf_path, "data_preparation_pipe", "denoise_T1",
                               "sub-Apache_ses-01_T1w_cropped_noise_corrected.nii.gz")


    denoised_T1 = os.path.join(wf_path,"denoised_T1.png")

    cmd = "fsleyes render --outfile {} --size 1800 600 {} -cm Render3".format(denoised_T1, denoised_T1_file)
    os.system(cmd)

    debiased_mask_T1_file = os.path.join(seg_pipe, "masked_correct_bias_pipe", "restore_mask_T1",
                             "sub-Apache_ses-01_T1w_cropped_noise_corrected_maths_masked.nii.gz")

    debiased_mask_T1 = os.path.join(wf_path,"debiased_mask_T1.png")

    cmd = "fsleyes render --outfile {} --size 1800 600 {} -cm Render3".format(debiased_mask_T1, debiased_mask_T1_file)
    os.system(cmd)


    N4_debias_T1_file = os.path.join(seg_pipe, "register_NMT_pipe", "norm_intensity",
                             "sub-Apache_ses-01_T1w_cropped_noise_corrected_maths_masked_corrected.nii.gz")

    N4_debias_T1 = os.path.join(wf_path,"N4_debias_T1.png")

    cmd = "fsleyes render --outfile {} --size 1800 600 {} -cm Render3".format(N4_debias_T1, N4_debias_T1_file)
    os.system(cmd)

    import matplotlib.pyplot as plt  # noqa

    fig, axs = plt.subplots(3, 1, figsize=(36, 24))
    axs[0].imshow(plt.imread(denoised_T1))
    axs[0].axis('off')

    axs[1].imshow(plt.imread(debiased_mask_T1))
    axs[1].axis('off')

    axs[2].imshow(plt.imread(N4_debias_T1))
    axs[2].axis('off')
    plt.show()




.. image:: /auto_examples/images/sphx_glr_plot_segment_pnh_kepkee_006.png
    :class: sphx-glr-single-img




register template to subject
==============================



.. code-block:: python


    reg_template_mask_to_T1_file = os.path.join(
        seg_pipe, "register_NMT_pipe", "align_NMT",
        "NMT_allineate.nii.gz")

    reg_template_mask_to_T1 = os.path.join(wf_path,"reg_template_mask_to_T1.png")


    cmd = "fsleyes render --outfile {} --size 1800 600 {} {} -a 50".format(
        reg_template_mask_to_T1, reg_template_mask_to_T1_file, debiased_mask_T1_file)

    os.system(cmd)

    import matplotlib.pyplot as plt  # noqa
    img = plt.imread(reg_template_mask_to_T1)
    plt.figure(figsize=(36, 12))
    plt.imshow(img)
    plt.axis('off')
    plt.show()




.. image:: /auto_examples/images/sphx_glr_plot_segment_pnh_kepkee_007.png
    :class: sphx-glr-single-img




segmentation results by tissue
================================



.. code-block:: python


    csf_file = os.path.join(seg_pipe, "segment_atropos_pipe", "threshold_csf", "segment_SegmentationPosteriors01_thresh.nii.gz")
    gm_file = os.path.join(seg_pipe, "segment_atropos_pipe", "threshold_gm", "segment_SegmentationPosteriors02_thresh.nii.gz")
    wm_file = os.path.join(seg_pipe, "segment_atropos_pipe", "threshold_wm", "segment_SegmentationPosteriors03_thresh.nii.gz")

    segmentation_sep = os.path.join(wf_path,"segmentation_sep.png")
    cmd = "fsleyes render --outfile {} --size 1800 600 {} {} -cm red -a 30 {} -cm blue -a 30 {} -cm green -a 30".format(segmentation_sep, debiased_mask_T1_file, gm_file, wm_file, csf_file)
    os.system(cmd)

    import matplotlib.pyplot as plt  # noqa
    img = plt.imread(segmentation_sep)
    plt.figure(figsize=(36, 12))
    plt.imshow(img)
    plt.axis('off')
    plt.show()



.. image:: /auto_examples/images/sphx_glr_plot_segment_pnh_kepkee_008.png
    :class: sphx-glr-single-img




**Total running time of the script:** ( 0 minutes  43.759 seconds)


.. _sphx_glr_download_auto_examples_plot_segment_pnh_kepkee.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_segment_pnh_kepkee.py <plot_segment_pnh_kepkee.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_segment_pnh_kepkee.ipynb <plot_segment_pnh_kepkee.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
